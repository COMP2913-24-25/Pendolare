// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Identity.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;

namespace Identity.DataAccess.Models;

public partial class PendoDatabaseContext : DbContext
{
    private readonly IdentityConfiguration _configuration;

    public PendoDatabaseContext(DbContextOptions<PendoDatabaseContext> options, IOptions<IdentityConfiguration> identityOptions)
        : base(options)
    {
        _configuration = identityOptions.Value;
    }

    public virtual DbSet<ApiClient> ApiClient { get; set; }

    public virtual DbSet<Configuration> Configuration { get; set; }

    public virtual DbSet<OtpLogin> OtpLogin { get; set; }

    public virtual DbSet<User> User { get; set; }

    public virtual DbSet<UserType> UserType { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(_configuration.ConnectionString);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

        modelBuilder.Entity<ApiClient>(entity =>
        {
            entity.HasKey(e => e.ApiClientId).HasName("PK__ApiClien__FDC5B7C88C5139EA");

            entity.ToTable("ApiClient", "shared");

            entity.HasIndex(e => e.ApiName, "UQ__ApiClien__274112CF5B222880").IsUnique();

            entity.Property(e => e.ApiName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ClientId).HasMaxLength(255);
            entity.Property(e => e.ClientSecret)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdateDate).HasDefaultValueSql("(getutcdate())");
        });

        modelBuilder.Entity<Configuration>(entity =>
        {
            entity.HasKey(e => e.ConfigurationId).HasName("PK__Configur__95AA53BB0AC1B491");

            entity.ToTable("Configuration", "shared");

            entity.HasIndex(e => e.Key, "UQ__Configur__C41E028916637BDF").IsUnique();

            entity.Property(e => e.ConfigurationId).HasDefaultValueSql("(newsequentialid())");
            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.Key)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdateDate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.Value).IsRequired();
        });

        modelBuilder.Entity<OtpLogin>(entity =>
        {
            entity.HasKey(e => e.OtpLoginId).HasName("PK__OtpLogin__C597BB3128D6130C");

            entity.ToTable("OtpLogin", "identity");

            entity.HasIndex(e => e.UserId, "IX_OtpLogin_UserId");

            entity.Property(e => e.OtpLoginId).HasDefaultValueSql("(newsequentialid())");
            entity.Property(e => e.CodeHash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.IssueDate).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.User).WithMany(p => p.OtpLogin)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OtpLogin_User");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__1788CC4C4B712E8A");

            entity.ToTable("User", "identity");

            entity.HasIndex(e => e.UserTypeId, "IX_User_UserType");

            entity.HasIndex(e => e.Email, "UQ__User__A9D10534F9A0D229").IsUnique();

            entity.Property(e => e.UserId).HasDefaultValueSql("(newsequentialid())");
            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdateDate).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.UserType).WithMany(p => p.User)
                .HasForeignKey(d => d.UserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_UserType");
        });

        modelBuilder.Entity<UserType>(entity =>
        {
            entity.HasKey(e => e.UserTypeId).HasName("PK__UserType__40D2D816FA76BF79");

            entity.ToTable("UserType", "identity");

            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}