name: SonarCloud PR Analysis

on:
  pull_request:
    branches:
      - main
      - dev

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # [Previous detect-changes job steps remain the same]
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for detecting changes
          
      - name: Get changed directories
        id: changed-dirs
        run: |
          CHANGES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -oE "^Pendo\.[^/]+" | sort -u)
          echo "Changed directories: $CHANGES"
          echo "dirs=$CHANGES" >> $GITHUB_OUTPUT

      - name: Detect project types
        id: set-matrix
        run: |
          MATRIX="{\"include\":["
          FIRST=true
          
          for DIR in ${{ steps.changed-dirs.outputs.dirs }}; do
            if [ ! -d "$DIR" ]; then
              continue
            fi
            
            # Check for project files using find
            if find "$DIR" -maxdepth 1 -name "*.sqlproj" | grep -q .; then
              TYPE="sql"
            elif find "$DIR" -maxdepth 1 -name "*.csproj" | grep -q .; then
              TYPE="dotnet"
            elif find "$DIR" -maxdepth 1 -name "package.json" | grep -q .; then
              TYPE="node"
            elif find "$DIR" -maxdepth 1 -name "requirements.txt" | grep -q .; then
              TYPE="python"
            else
              echo "No recognized project files found in $DIR"
              continue
            fi
            
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              MATRIX="${MATRIX},"
            fi
            
            MATRIX="${MATRIX}{\"directory\":\"$DIR\",\"type\":\"$TYPE\"}"
          done
          
          # Add default entry if no projects were found
          if [ "$FIRST" = true ]; then
            MATRIX="${MATRIX}{\"directory\":\".\",\"type\":\"default\"}"
          fi
          
          MATRIX="${MATRIX}]}"
          echo "Generated matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  sonarcloud:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Skip default entry
    - name: Skip default entry
      if: matrix.type == 'default'
      run: |
        echo "Skipping default matrix entry"
        exit 0

    # Setup .NET (needed for both .NET and SQL projects)
    - name: Setup .NET
      if: matrix.type == 'dotnet' || matrix.type == 'sql'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0'

    # Setup Node.js
    - name: Setup Node.js
      if: matrix.type == 'node'
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    # Setup Python
    - name: Setup Python
      if: matrix.type == 'python'
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # Install SonarScanner
    - name: Install SonarScanner
      if: matrix.type == 'sql' || matrix.type == 'dotnet'
      run: |
        dotnet tool install --global dotnet-sonarscanner
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    # Install dependencies based on project type
    - name: Install .NET dependencies
      if: matrix.type == 'dotnet' || matrix.type == 'sql'
      working-directory: ${{ matrix.directory }}
      run: dotnet restore

    - name: Install Node.js dependencies
      if: matrix.type == 'node'
      working-directory: ${{ matrix.directory }}
      run: npm install

    - name: Install Python dependencies
      if: matrix.type == 'python'
      working-directory: ${{ matrix.directory }}
      run: pip install -r requirements.txt

    # Run SonarCloud analysis based on project type
    - name: SonarCloud .NET/SQL analysis
      if: matrix.type == 'dotnet' || matrix.type == 'sql'
      working-directory: ${{ matrix.directory }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner begin \
          /k:"pendo_carsharing" \
          /o:"pendo" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.cs.vstest.reportsPaths="**/*.trx" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
          /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}" \
          /d:sonar.pullrequest.branch="${{ github.head_ref }}" \
          /d:sonar.pullrequest.base="${{ github.base_ref }}" \
          /d:sonar.pullrequest.github.repository="${{ github.repository }}" \
          /d:sonar.scm.provider=git
        dotnet build --no-incremental
        dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: SonarCloud Node.js analysis
      if: matrix.type == 'node'
      working-directory: ${{ matrix.directory }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.projectKey=pendo_carsharing \
          -Dsonar.organization=pendo \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
          -Dsonar.pullrequest.branch=${{ github.head_ref }} \
          -Dsonar.pullrequest.base=${{ github.base_ref }} \
          -Dsonar.pullrequest.github.repository=${{ github.repository }} \
          -Dsonar.scm.provider=git

    - name: SonarCloud Python analysis
      if: matrix.type == 'python'
      working-directory: ${{ matrix.directory }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.projectKey=pendo_carsharing \
          -Dsonar.organization=pendo \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.python.version=3.9 \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
          -Dsonar.pullrequest.branch=${{ github.head_ref }} \
          -Dsonar.pullrequest.base=${{ github.base_ref }} \
          -Dsonar.pullrequest.github.repository=${{ github.repository }} \
          -Dsonar.scm.provider=git

    # Comment with analysis results
    - name: Add PR Comment
      uses: actions/github-script@v6
      if: always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const projectKey = 'pendo_carsharing';
          const organization = 'pendo';
          const pullRequestNumber = context.payload.pull_request.number;
          
          const sonarCloudUrl = `https://sonarcloud.io/dashboard?id=${projectKey}&pullRequest=${pullRequestNumber}`;
          
          const comment = `## SonarCloud Analysis Results üîç
          
          The analysis has completed! You can view the detailed results here:
          [View Analysis Results](${sonarCloudUrl})
          
          This analysis includes:
          - Code quality metrics
          - Code coverage data
          - Security vulnerabilities
          - Code smells and technical debt
          
          Please review the results and address any issues found.`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pullRequestNumber,
            body: comment
          });
