name: Deploy Identity Service to Azure

on:
  pull_request:
    branches: 
      - main
      - dev
      - infrastructure/kong-integration
    paths:
      - 'Pendo.IdentityService/**'
      - 'infrastructure/**'
  workflow_dispatch:

env:
  ACR_NAME: pendocontainerregistry
  IDENTITY_SERVICE_IMAGE_NAME: identity-service  # Updated from pendo-identity-service
  RESOURCE_GROUP: dev
  CONTAINER_APP_NAME: identity-service  # Updated from pendo-identity-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: '0a6d7ce5-4951-4af8-932a-94714dd9e70b'
        tenant-id: '0adc3547-e686-4727-9a4c-0c5bb6699047'
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    # Get Kong Gateway FQDN for service integration - make it optional
    - name: Get Kong Gateway FQDN
      id: kong_fqdn
      continue-on-error: true
      run: |
        KONG_FQDN=$(az containerapp show --name kong-gateway --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv 2>/dev/null || echo "")
        if [ -n "$KONG_FQDN" ]; then
          echo "KONG_GATEWAY_FQDN=$KONG_FQDN" >> $GITHUB_ENV
          echo "KONG_EXISTS=true" >> $GITHUB_ENV
          echo "::set-output name=fqdn::$KONG_FQDN"
          echo "::set-output name=exists::true"
        else
          echo "Kong Gateway does not exist yet or could not be accessed"
          echo "KONG_EXISTS=false" >> $GITHUB_ENV
          echo "::set-output name=exists::false"
        fi

    # Build and push the Identity Service image
    - name: Build and push image to ACR
      env:
        ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
        ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      run: |
        docker login ${{ env.ACR_NAME }}.azurecr.io -u $ACR_USERNAME -p $ACR_PASSWORD
        cd Pendo.IdentityService
        docker build . -f ./Pendo.IdentityService.Api/Dockerfile -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IDENTITY_SERVICE_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IDENTITY_SERVICE_IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.ACR_NAME }}.azurecr.io/${{ env.IDENTITY_SERVICE_IMAGE_NAME }}:${{ github.sha }} ${{ env.ACR_NAME }}.azurecr.io/${{ env.IDENTITY_SERVICE_IMAGE_NAME }}:latest
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IDENTITY_SERVICE_IMAGE_NAME }}:latest

    # Validate the database connection string before deploying
    - name: Validate Database Connection String
      run: |
        # Check if the connection string is set
        if [ -z "${{ secrets.AZURE_SQL_CONNECTION_STRING }}" ]; then
          echo "::error::AZURE_SQL_CONNECTION_STRING is not set. Please set it in GitHub Secrets."
          exit 1
        fi
        
        # Basic format check
        if [[ "${{ secrets.AZURE_SQL_CONNECTION_STRING }}" != *"Server="* ]] || [[ "${{ secrets.AZURE_SQL_CONNECTION_STRING }}" != *";Database="* ]]; then
          echo "::warning::Connection string may not be properly formatted. Make sure it contains Server= and Database= parameters."
          echo "::warning::Example format: Server=myserver.database.windows.net;Database=mydatabase;User Id=myuser;Password=mypassword;Trust Server Certificate=True;"
        fi
        
        echo "Database connection string validation passed."

    # Deploy the Identity Service with SQL service connection
    - name: Deploy Container App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Deploy with each parameter separately
          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file infrastructure/identity-service.bicep \
            --parameters containerAppName=${{ env.CONTAINER_APP_NAME }} \
            --parameters containerAppEnvironmentName=pendo-env-dev \
            --parameters registryName=${{ env.ACR_NAME }} \
            --parameters registryUsername=${{ secrets.ACR_USERNAME }} \
            --parameters registryPassword='${{ secrets.ACR_PASSWORD }}' \
            --parameters dbConnectionString='${{ secrets.AZURE_SQL_CONNECTION_STRING }}' \
            --parameters kongGatewayFqdn='${{ steps.kong_fqdn.outputs.fqdn }}'

    # Wait for identity service to be ready
    - name: Wait for service to be ready
      run: |
        echo "Waiting for identity-service to be ready..."
        sleep 30

    # Get Identity Service FQDN
    - name: Get Identity Service FQDN
      id: identity_fqdn
      continue-on-error: true
      run: |
        IDENTITY_FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv 2>/dev/null || echo "")
        if [ -n "$IDENTITY_FQDN" ]; then
          echo "IDENTITY_SERVICE_FQDN=$IDENTITY_FQDN" >> $GITHUB_ENV
          echo "IDENTITY_EXISTS=true" >> $GITHUB_ENV
          echo "::set-output name=fqdn::$IDENTITY_FQDN"
          echo "::set-output name=exists::true"
        else
          echo "Identity Service does not exist yet or could not be accessed"
          echo "IDENTITY_EXISTS=false" >> $GITHUB_ENV
          echo "::set-output name=exists::false"
        fi
    
    # Update Kong configuration if necessary - without creating a PR
    - name: Update Kong configuration with Identity Service FQDN
      if: env.KONG_EXISTS == 'true' && env.IDENTITY_EXISTS == 'true'
      run: |
        echo "Both services exist - updating Kong configuration"
        # Install yq
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        # Get the identity service FQDN
        IDENTITY_FQDN="${{ steps.identity_fqdn.outputs.fqdn }}"
        echo "Identity Service FQDN: $IDENTITY_FQDN"
        
        # Instead of creating a PR, print instructions for manual update
        echo "::warning::Kong configuration needs to be updated"
        echo "::warning::Please update the identity-service URL in kong-azure.yml to: https://$IDENTITY_FQDN"
        
        # Get Kong Gateway FQDN to display for manual testing
        KONG_FQDN="${{ steps.kong_fqdn.outputs.fqdn }}"
        echo "::notice::Kong Gateway is at: https://$KONG_FQDN"
        echo "::notice::After updating Kong, test with: curl -i https://$KONG_FQDN/api/ping"
        
        # Output a summary file that can be used in GitHub Actions summary
        echo "# Kong Gateway Update Required" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The Identity Service has been deployed successfully with FQDN: \`$IDENTITY_FQDN\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Please update the Kong Gateway configuration in \`Pendo.ApiGateway/kong/declarative/kong-azure.yml\` to use this FQDN." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Required Change:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
        echo "services:" >> $GITHUB_STEP_SUMMARY
        echo "  - name: identity-service" >> $GITHUB_STEP_SUMMARY
        echo "    url: https://$IDENTITY_FQDN" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    # Deploy a configuration update script for manual updates
    - name: Save Kong update script
      if: env.KONG_EXISTS == 'true' && env.IDENTITY_EXISTS == 'true'
      run: |
        # Create a helpful script for manually updating Kong configuration
        cat > ./update-kong-config.sh << EOL
        #!/bin/bash
        
        # This script updates Kong Gateway configuration with the latest Identity Service FQDN
        
        IDENTITY_FQDN="${{ steps.identity_fqdn.outputs.fqdn }}"
        KONG_GATEWAY_FQDN="${{ steps.kong_fqdn.outputs.fqdn }}"
        
        # Install yq if not available
        if ! [ -x "\$(command -v yq)" ]; then
          echo "Installing yq..."
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq
        fi
        
        # Update Kong config
        echo "Updating Kong configuration with Identity Service FQDN: \$IDENTITY_FQDN"
        yq -i '.services[] |= select(.name == "identity-service").url = "https://'\$IDENTITY_FQDN'"' Pendo.ApiGateway/kong/declarative/kong-azure.yml
        
        echo "Configuration updated. Now rebuild and deploy Kong Gateway"
        echo "After deploying, test with: curl -i https://\$KONG_GATEWAY_FQDN/api/ping"
        EOL
        
        chmod +x ./update-kong-config.sh
        
        echo "::notice::Created update script: ./update-kong-config.sh"
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Automatic Update" >> $GITHUB_STEP_SUMMARY
        echo "Run the generated script to automatically update your Kong configuration:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "./update-kong-config.sh" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
