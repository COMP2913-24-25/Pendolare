name: Deploy Identity Service to Azure

on:
  pull_request:
    branches: 
      - main
      - dev
      - infrastructure/kong-integration
    paths:
      - 'Pendo.IdentityService/**'
      - 'infrastructure/**'
  workflow_dispatch:

env:
  ACR_NAME: pendocontainerregistry
  IDENTITY_SERVICE_IMAGE_NAME: identity-service
  RESOURCE_GROUP: dev
  CONTAINER_APP_NAME: identity-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v2

    # Add delay at start to ensure any previous workflows have completed
    - name: Wait for API rate limits to stabilize
      run: sleep 30

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: '0a6d7ce5-4951-4af8-932a-94714dd9e70b'
        tenant-id: '0adc3547-e686-4727-9a4c-0c5bb6699047'
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    # Get Kong Gateway FQDN - with reduced API calls
    - name: Get Kong Gateway FQDN
      id: kong_fqdn
      continue-on-error: true
      run: |
        # Use --output none for commands that don't need output to reduce API load
        echo "Checking for Kong Gateway (reduced API calls)..."
        KONG_FQDN=$(az containerapp show --name kong-gateway --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv 2>/dev/null || echo "")
        if [ -n "$KONG_FQDN" ]; then
          echo "KONG_GATEWAY_FQDN=$KONG_FQDN" >> $GITHUB_ENV
          echo "KONG_EXISTS=true" >> $GITHUB_ENV
          echo "::set-output name=fqdn::$KONG_FQDN"
          echo "::set-output name=exists::true"
        else
          echo "Kong Gateway not found or inaccessible - continuing without it"
          echo "KONG_EXISTS=false" >> $GITHUB_ENV
          echo "::set-output name=exists::false"
        fi
        # Add small delay after API call
        sleep 5
    # Build and push the Identity Service image
    - name: Build and push image to ACR
      env:
        ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
        ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      run: |
        echo "Building and pushing container image..."
        docker login ${{ env.ACR_NAME }}.azurecr.io -u $ACR_USERNAME -p $ACR_PASSWORD
        cd Pendo.IdentityService
        docker build . -f ./Pendo.IdentityService.Api/Dockerfile -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IDENTITY_SERVICE_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IDENTITY_SERVICE_IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.ACR_NAME }}.azurecr.io/${{ env.IDENTITY_SERVICE_IMAGE_NAME }}:${{ github.sha }} ${{ env.ACR_NAME }}.azurecr.io/${{ env.IDENTITY_SERVICE_IMAGE_NAME }}:latest
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IDENTITY_SERVICE_IMAGE_NAME }}:latest
        
        # Add delay after ACR operations
        sleep 10
    # Validate the database connection string before deploying
    - name: Validate Database Connection String
      run: |
        # Simple check without excessive API calls
        if [ "${{ secrets.AZURE_SQL_CONNECTION_STRING != '' }}" != "true" ]; then
          echo "::error::AZURE_SQL_CONNECTION_STRING is not set. Please set it in GitHub Secrets."
          exit 1
        fi
        echo "Database connection string exists."
    # Deploy the Identity Service
    - name: Deploy Container App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Deploying container app (this may take a few minutes)..."
          # Deploy with reduced verbosity
          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file infrastructure/identity-service.bicep \
            --parameters containerAppName=${{ env.CONTAINER_APP_NAME }} \
            --parameters containerAppEnvironmentName=pendo-env-dev \
            --parameters registryName=${{ env.ACR_NAME }} \
            --parameters registryUsername=${{ secrets.ACR_USERNAME }} \
            --parameters registryPassword='${{ secrets.ACR_PASSWORD }}' \
            --parameters dbConnectionString='${{ secrets.AZURE_SQL_CONNECTION_STRING }}' \
            --parameters kongGatewayFqdn='${{ steps.kong_fqdn.outputs.fqdn }}' \
            --output none
          
          # Add longer delay after major deployment
          sleep 15
    # Configure SQL Server firewall - with fewer API calls
    - name: Configure SQL Server Firewall
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Configuring SQL Firewall rules..."
          
          # Create firewall rules silently
          echo "Adding 'Allow Azure Services' rule to SQL firewall..."
          az sql server firewall-rule create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --server pendolare \
            --name "AllowAllWindowsAzureIps" \
            --start-ip-address 0.0.0.0 \
            --end-ip-address 0.0.0.0 \
            --output none
          
          # Add delay between API calls
          sleep 5
          
          # Get Container App Environment static outbound IP with minimal query
          echo "Getting Container App outbound IP..."
          OUTBOUND_IP=$(az containerapp env show --name pendo-env-dev --resource-group ${{ env.RESOURCE_GROUP }} --query properties.staticIp -o tsv)
          
          if [ -n "$OUTBOUND_IP" ]; then
            echo "Adding outbound IP $OUTBOUND_IP to SQL firewall rules..."
            az sql server firewall-rule create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --server pendolare \
              --name "ContainerAppOutbound" \
              --start-ip-address "$OUTBOUND_IP" \
              --end-ip-address "$OUTBOUND_IP" \
              --output none \
              || echo "Failed to create outbound IP rule, but continuing with Azure Services rule"
          fi
          
          # Longer delay to avoid rate limits
          sleep 10
    # Wait for identity service to be ready - with increased wait time
    - name: Wait for service to be ready
      run: |
        echo "Waiting for identity-service to be ready..."
        # Increase wait time to 60 seconds to reduce subsequent API call pressure
        sleep 60
    # Get Identity Service FQDN - with minimal API calls
    - name: Get Identity Service FQDN
      id: identity_fqdn
      continue-on-error: true
      run: |
        echo "Getting Identity Service FQDN..."
        IDENTITY_FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv 2>/dev/null || echo "")
        if [ -n "$IDENTITY_FQDN" ]; then
          echo "IDENTITY_SERVICE_FQDN=$IDENTITY_FQDN" >> $GITHUB_ENV
          echo "IDENTITY_EXISTS=true" >> $GITHUB_ENV
          echo "::set-output name=fqdn::$IDENTITY_FQDN"
          echo "::set-output name=exists::true"
        else
          echo "Identity Service does not exist yet or could not be accessed"
          echo "IDENTITY_EXISTS=false" >> $GITHUB_ENV
          echo "::set-output name=exists::false"
        fi
        # Add delay after API call
        sleep 5
    
    # Update Kong configuration if necessary - without creating a PR
    - name: Update Kong configuration with Identity Service FQDN
      if: env.KONG_EXISTS == 'true' && env.IDENTITY_EXISTS == 'true'
      run: |
        echo "Both services exist - updating Kong configuration"
        # Install yq
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        # Get the identity service FQDN
        IDENTITY_FQDN="${{ steps.identity_fqdn.outputs.fqdn }}"
        echo "Identity Service FQDN: $IDENTITY_FQDN"
        
        # Output manual instructions instead of making more API calls
        echo "::notice::Kong Gateway is at: https://${{ steps.kong_fqdn.outputs.fqdn }}"
        echo "::notice::Identity Service is at: https://$IDENTITY_FQDN"
        echo "::notice::After updating Kong, test with: curl -i https://${{ steps.kong_fqdn.outputs.fqdn }}/api/Identity/Ping"