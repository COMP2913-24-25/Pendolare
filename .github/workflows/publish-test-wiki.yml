name: Update Wiki with Test Results
description: "Collect test results and update the wiki"

on:
  workflow_run:
    workflows: ["Pendo-MasterWorkflow", "Pendo-ApiGateway", "Pendo-AdminService", "Pendo-BookingService", "Pendo-JourneyService", "Pendo-MessageService", "Pendo-PaymentService", "Pendo-IdentityService"]
    types:
      - completed

jobs:
  update_wiki:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WF_PAT }}

      - name: Check for wiki lock file and wait if present
        id: check_lock
        run: |
          echo "Checking for the lock file..."
          LOCK_FILE="./wiki-lock"
          MAX_ATTEMPTS=30
          WAIT_TIME=10
          ATTEMPT=0
          while [ -f "$LOCK_FILE" ]; do
            if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
              echo "Timeout reached. Exiting."
              exit 1   # Stop after max attempts
            fi
            echo "Lock file detected. Waiting..."
            sleep $WAIT_TIME
            ((ATTEMPT++))
          done
          echo "No lock file found. Proceeding with wiki update."

      - name: Create lock file to prevent race conditions
        run: echo "LOCKED" > wiki-lock

      - name: Download test artifacts from all services
        uses: actions/download-artifact@v3
        with:
          name: test-results-Pendo-ApiGateway
          path: ./artifacts/ApiGateway/
        continue-on-error: true  

      - name: Download test artifacts from Pendo-AdminService
        uses: actions/download-artifact@v3
        with:
          name: test-results-Pendo-AdminService
          path: ./artifacts/AdminService/
        continue-on-error: true  

      - name: Download test artifacts from Pendo-BookingService
        uses: actions/download-artifact@v3
        with:
          name: test-results-Pendo-BookingService
          path: ./artifacts/BookingService/
        continue-on-error: true  

      - name: Download test artifacts from Pendo-JourneyService
        uses: actions/download-artifact@v3
        with:
          name: test-results-Pendo-JourneyService
          path: ./artifacts/JourneyService/
        continue-on-error: true  

      - name: Download test artifacts from Pendo-MessageService
        uses: actions/download-artifact@v3
        with:
          name: test-results-Pendo-MessageService
          path: ./artifacts/MessageService/
        continue-on-error: true  

      - name: Download test artifacts from Pendo-PaymentService
        uses: actions/download-artifact@v3
        with:
          name: test-results-Pendo-PaymentService
          path: ./artifacts/PaymentService/
        continue-on-error: true  

      - name: Download test artifacts from Pendo-IdentityService
        uses: actions/download-artifact@v3
        with:
          name: test-results-Pendo-IdentityService
          path: ./artifacts/IdentityService/
        continue-on-error: true  

      - name: Update Wiki with Test Results
        run: |
          chmod +x ./scripts/parse-unittests.py
          
          if [ -f ./artifacts/ApiGateway/apigateway_test_results.xml ]; then
            python ./scripts/parse-unittests.py \
              --service ApiGateway \
              --report ./artifacts/ApiGateway/apigateway_test_results.xml \
              --wiki-file wiki/Tests.md
          fi
          
          if [ -f ./artifacts/AdminService/admin_test_results.xml ]; then
            python ./scripts/parse-unittests.py \
              --service AdminService \
              --report ./artifacts/AdminService/admin_test_results.xml \
              --wiki-file wiki/Tests.md
          fi
          
          if [ -f ./artifacts/BookingService/booking_test_results.xml ]; then
            python ./scripts/parse-unittests.py \
              --service BookingService \
              --report ./artifacts/BookingService/booking_test_results.xml \
              --wiki-file wiki/Tests.md
          fi
          
          if [ -f ./artifacts/JourneyService/journey_test_results.xml ]; then
            python ./scripts/parse-unittests.py \
              --service JourneyService \
              --report ./artifacts/JourneyService/journey_test_results.xml \
              --wiki-file wiki/Tests.md
          fi
          
          if [ -f ./artifacts/MessageService/message_test_results.xml ]; then
            python ./scripts/parse-unittests.py \
              --service MessageService \
              --report ./artifacts/MessageService/message_test_results.xml \
              --wiki-file wiki/Tests.md
          fi
          
          if [ -f ./artifacts/PaymentService/payment_test_results.xml ]; then
            python ./scripts/parse-unittests.py \
              --service PaymentService \
              --report ./artifacts/PaymentService/payment_test_results.xml \
              --wiki-file wiki/Tests.md
          fi
          
          if [ -f ./artifacts/IdentityService/identity_test_results.trx ]; then
            python ./scripts/parse-unittests.py \
              --service IdentityService \
              --report ./artifacts/IdentityService/identity_test_results.trx \
              --wiki-file wiki/Tests.md
          fi

      - name: Commit and push wiki changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add wiki/Tests.md
          git commit -m "Update Wiki with latest test results"
          git push
        if: always()  # Ensure this runs even if previous steps fail

      - name: Remove lock file after wiki update
        run: rm -f wiki-lock
        if: always()

      - name: Commit and push the removal of the lock file
        run: |
          git add wiki-lock
          git commit -m "Remove wiki lock file"
          git push
        if: always()  # Always run after the wiki update and lock file removal